there are 3 ways to solve  this problemm 
 
 1:- sort the array and check the neighbour element if same then return  the element 
 
 int findDuplicate(vector<int> &arr, int n){
	sort(arr.begin(), arr.end());
    for(int i=0;i<n;i++){
        if(arr[i]==arr[i+1]) return arr[i];
    }
    return 0;
}
    
    
2:- create a dummy array  and increase the value on the index and check if the value is  grater than 1 than return the index

 int findDuplicate(vector<int>& nums) {
        int n = nums.size();
        vector<int> temp(n+1, 0);
        for(int i=0;i<n;i++){
            temp[nums[i]]++;
        }
        for(int i=0;i<n;i++){
            if(temp[i]>1) return i;
        }
        return 0;
    }
    
3:- create 2 pointer slow and fast , move slow  by 1 step and fast by 2 step till they do not meet at a point 
    as soon as they meet at a point start fast pointer from beginning and then traverse them by 1 step 
    if the meet then return slow pointer
    
     int findDuplicate(vector<int>& nums) {
        int slow = nums[0], fast = nums[0];
        do{
            slow = nums[slow];
            fast = nums[nums[fast]];
        }while(slow!=fast);
        
        fast = nums[0];
        while(slow!=fast){
            slow = nums[slow];
            fast = nums[fast];
        }
        return slow;
    }
